@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @GetEnumerableTypeExpression(Model.ViewDataTypeName)

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
        @:@@{
        @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
            @:Layout = "@Model.LayoutPageFile";
        }
        @:}
        @:
        @:
        @:@@section Styles{
        @:<link href="~/css/jquery.dataTables.min.css" rel="stylesheet" />
        @:<link href="~/css/buttons.dataTables.min.css" rel="stylesheet" />
        @:}
    }
    else
    {
        @:@@{
        @:Layout = null;
        @:}
        @:
        @:<!DOCTYPE html>
        @:
        @:<html>
        @:<head>
            @:<meta name="viewport" content="width=device-width" />
            @:<title>@Model.ViewName</title>




        @:</head>
        @:<body>
            //    PushIndent("    ");
        }
        @:<p>
            @:<a asp-action="Create" class="btn blue"><i class="fa fa-plus-square"></i></a>
        @:</p>
        @:<div class="portlet box blue-madison">
            @:<div class="portlet-title text-center">
                <div class="caption">
                    <i class="fa fa-list"></i>Lista de  @Model.ViewDataTypeShortName

                </div>
                @:<div class="portlet-body">
                @:</div>
            @:</div>
        @:</div>
        @:<table class="table table-responsive" id="myDatatable">
            @:<thead>
                @:<tr>
                    Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
                    Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

                    foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                    {
                        if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                            && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                        {
                            <th>
                                @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                            </th>
                        }
                        else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                        {
                            <th>
                                @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
                            </th>
                        }
                    }
                    @:<th>Acciones</th>
                @:</tr>
            @:</thead>
            @:<tbody>
                @:@@foreach (var item in Model) {
                @:<tr>
                    foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                    {
                        if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                            && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                        {
                            <td>
                                @@Html.DisplayFor(modelItem => item.@GetValueExpression(property))
                            </td>
                        }
                        else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                        {
                            <td>
                                @@Html.DisplayFor(modelItem => item.@GetValueExpression(navigation).@navigation.DisplayPropertyName)
                            </td>
                        }
                    }
                    string pkName = GetPrimaryKeyName();
                    if (pkName != null)
                    {
                        @:<td>
                            @:<a asp-action="Edit" asp-route-id="@@item.@pkName" class="btn yellow hidden-print">Editar</a>
                            @:<a asp-action="Details" asp-route-id="@@item.@pkName" class="btn btn-info hidden-print">Detalles</a> 
                            @:<a asp-action="Delete" asp-route-id="@@item.@pkName" class="btn btn-danger hidden-print">Eliminar</a>
                        @:</td>
                    }
                    else
                    {
                        <td>
                            @@Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                            @@Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                            @@Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
                        </td>
                    }
                @:</tr>
                @:}
            @:</tbody>


        @:</table>
        if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
        {
            //ClearIndent();
            @:
        @:</body>
    @:</html>
}
else
{
   @:@@section scripts{
    @:<script src="~/js/datatables.min.js"></script>
    @:<script src="~/js/dataTables.buttons.min.js"></script>
    @:<script src="~/js/jszip.min.js"></script>
    @:<script src="~/js/buttons.html5.min.js"></script>
    @:<script>
       @:$('document').ready(function () {
           @:$('#myDatatable').DataTable({
        @:"language": {
           @: "paginate": {
                @:"first": "Primera",
                @:"previous": "Anterior",
                @:"next": "Siguiente",
                @:"last": "&Uacute;ltima"
@:},
           @: "info": "Mostrando resultados del _START_ al _END_ de un total de _TOTAL_",
            @:"lengthMenu": "Mostrando _MENU_ resultados",
            @:"search": "Buscar: ",
            @:"infoEmpty": "Mostrando 0 resultados",
            @:"infoFiltered": "(filtrado de un total de _MAX_ resultados)",
            @:"sZeroRecords": "No se encontraron resultados con este criterio"
        @:},
        @:"pagingType": "full_numbers",
        @:dom: 'Bfrtip',
        @:responsive:true,
        @:buttons: [
            @:{
             @:   extend: 'print',
             @:   text: 'Imprimir'
           @: },
            @:'excelHtml5',
           @: 'pdf',
           @: 'csv',
           @: {
           @:     extend: 'copy',
            @:    text: 'Copiar',
            @:    exportOptions: {
            @:        orthogonal: 'copy'
            @:    }
           @: }

       @: ]
    @:});
      @:});
    @:</script>
    @:}
}

}
@functions
{
string GetPrimaryKeyName()
{
    return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
    ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
    : null;
}

string GetValueExpression(IPropertyMetadata property)
{
    return property.PropertyName;
}

string GetValueExpression(INavigationMetadata navigation)
{
    return navigation.AssociationPropertyName;
}

string GetEnumerableTypeExpression(string typeName)
{
    return "IEnumerable<" + typeName + ">";
}
}