@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
}
    <hr />
    <div class="row">
        <div class="col-md-2"></div>
        <div class="col-md-8">
            <div class="portlet box blue">
                <div class="portlet-title">
                    <div class="caption">
                        <i class="fa fa-eye"></i>Detalles @Model.ViewDataTypeShortName
                    </div>
                </div>
                <div class="portlet-body">
                    @{
                        Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
                        Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

                        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                        {
                    @:<div class="row static-info">
                        if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                        && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                        {
                                @:<div class="col-md-6 text-center">
                                    <dt>
                                        @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                                    </dt>
                                @:</div>
                                @:<div class="col-md-6 text-left">
                                    <dd>
                                        @@Html.DisplayFor(model => model.@GetValueExpression(property))
                                    </dd>
                                @:</div>
                       
                        }
                        else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                        {
                                @:<div class="col-md-6 text-center">
                                    <dt>
                                        @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
                                  </dt>
                                @:</div>
                                @:<div class="col-md-6 text-left">
                                      <dd>
                                          @@Html.DisplayFor(model => model.@GetValueExpression(navigation).@navigation.DisplayPropertyName)
                                      </dd>
                                @:</div>
                        
                        }
                    @:</div>
                        }
                    }
                </div>
            </div>
        </div>
       <div class="col-md-2"></div>
    </div>
    <dl class="dl-horizontal">
  </dl>
<div class="text-center">
@{
    string pkName = GetPrimaryKeyName();
   @:<div class="btn-group btn-group-solid">
    if (pkName != null)
    {
        @:<a asp-action="Index" class="btn btn-info">Atrás</a>
        @:<a asp-action="Edit" class="btn yellow" asp-route-id="@@Model.@pkName">Editar</a> 
    }
    else
    {
        @:<a asp-action="Index" class="btn btn-info">Atrás</a>
        @:@@Html.ActionLink("Edit", "Edit", new { /* id = Model.PrimaryKey */ }) 

    }
@:</div>
}</div>
@{
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }
}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }
}