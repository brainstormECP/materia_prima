@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }

    
@:<hr />
@:<div class="row">
    @:<div class="col-md-2"></div>
    @:<div class="col-md-8">
        @:<div class="portlet box blue">
            @:<div class="portlet-title">
                <div class="caption">
                    <i class="fa fa-plus-square"></i>Crear @Model.ViewDataTypeShortName
                </div>
               
            @:</div>
            @:<div class="portlet-body">


                    @:<form asp-action="@Model.ViewName">
                        @:<div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        foreach (var property in Model.ModelMetadata.Properties)
                        {
                            if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly)
                            {
                                if (property.IsForeignKey)
                                {
                                    @:<div class="form-group">
                                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                                        @:<select asp-for="@property.PropertyName" class="form-control" asp-items="ViewBag.@property.PropertyName"></select>
                                    @:</div>
                                    continue;
                                }

                                bool isCheckbox = property.TypeName.Equals("System.Boolean");
                                if (isCheckbox)
                                {
                                    @:<div class="form-group">
                                        @:<div class="checkbox">
                                            @:<label>
                                                @:<input asp-for="@property.PropertyName" /> @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                                            @:</label>
                                        @:</div>
                                    @:</div>
                                }
                                else if (property.IsEnum && !property.IsEnumFlags)
                                {
                                    @:<div class="form-group">
                                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                                        @:<select asp-for="@property.PropertyName" class="form-control"></select>
                                        @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                                    @:</div>
                                }
                                else if (property.IsMultilineText)
                                {
                                    @:<div class="form-group">
                                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                                        @:<textarea asp-for="@property.PropertyName" class="form-control" rows="5"></textarea>
                                        @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                                    @:</div>
                                }
                                else
                                {
                                    @:<div class="form-group">
                                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                                        @:<input asp-for="@property.PropertyName" class="form-control" />
                                        @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                                    @:</div>
                                }
                            }
                        }

                        <div class="form-group text-center">
                            <input type="submit" value="Crear" class="btn btn-primary" />
                        </div>
                    @:</form>
            @:</div>
        @:</div>
    @:</div>
    @:<div class="col-md-2"></div>
@:</div>
    }
<div>
</div>

@{
    if (Model.ReferenceScriptLibraries)
    {
@:@@section Scripts {
    @:@@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
@:}
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    // Do we need to use this in conjunction with the PrimaryKey check?
    bool IsPropertyGuid(IPropertyMetadata property)
    {
        return string.Equals("System.Guid", property.TypeName, StringComparison.OrdinalIgnoreCase);
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }
}