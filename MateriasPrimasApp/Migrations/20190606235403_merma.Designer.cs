// <auto-generated />
using System;
using MateriasPrimasApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MateriasPrimasApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190606235403_merma")]
    partial class merma
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("MateriasPrimasApp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int?>("UnidadOrganizativaId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("UnidadOrganizativaId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "f42559a2-2776-4e9b-9ba1-268597eff72b", AccessFailedCount = 0, Active = true, ConcurrencyStamp = "36fd2616-8e8a-4cc6-8a5a-52d963207836", Email = "admin@materiaprima.cu", EmailConfirmed = false, LockoutEnabled = false, NormalizedEmail = "ADMIN@MATERIAPRIMA.CU", NormalizedUserName = "ADMIN", PasswordHash = "AQAAAAEAACcQAAAAEP4OedI6m26WUn/2C4AcBkzdT6SnL/6E+xakQ/9mGAkqqp3t9PwyIR6l9obLouKIVg==", PhoneNumberConfirmed = false, SecurityStamp = "43VMKYQKNTENYZVJNU2TII26X23H5PGV", TwoFactorEnabled = false, UserName = "admin" },
                        new { Id = "e4acfaab-e3c9-42ef-9e21-1902da5374af", AccessFailedCount = 0, Active = true, ConcurrencyStamp = "e3730b4c-284a-48da-ace3-b5f31f5671df", Email = "user1@mp.cu", EmailConfirmed = false, LockoutEnabled = false, NormalizedEmail = "USER1@MP.CU", NormalizedUserName = "USER1", PasswordHash = "AQAAAAEAACcQAAAAECmA0XlVxV7cpw5UFHBIIDAKwZ9RSjLf0g5QOiC9UwYIi8cn0Lw+2QqwOsDdtWkEyw==", PhoneNumberConfirmed = false, SecurityStamp = "4AVYZFGP54QSAT3RJN4KI5R327NN4ID2", TwoFactorEnabled = false, UnidadOrganizativaId = 1, UserName = "user1" },
                        new { Id = "4396dcc4-83c3-4e66-9416-c7df16be8b4a", AccessFailedCount = 0, Active = true, ConcurrencyStamp = "22331850-3299-4df8-b760-4f58cf646be0", Email = "juan@mp.cu", EmailConfirmed = false, LockoutEnabled = false, NormalizedEmail = "JUAN@MP.CU", NormalizedUserName = "JUAN", PasswordHash = "AQAAAAEAACcQAAAAEOXJ8QHXja0i7s0kzcxlgJeT8xXS69ir2aCIkkIRoWjXP+GMHbeQsL/hAnMnfHziPg==", PhoneNumberConfirmed = false, SecurityStamp = "CLPB5NJX34OWXJDQZSTE3NUCQKSHDTI2", TwoFactorEnabled = false, UserName = "Juan" }
                    );
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Categoria");

                    b.HasData(
                        new { Id = 1, Descripcion = "Metales ferrosos tales como Hierro y Acero", Nombre = "Ferroso" },
                        new { Id = 2, Descripcion = "Metales no ferrosos tales como Aluminio y Cobre", Nombre = "No Ferroso" },
                        new { Id = 3, Descripcion = "Envases de cristal como Botellas de cerveza y otros productos reciclables como el cartón", Nombre = "Envases y varios" }
                    );
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo")
                        .IsRequired();

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.Property<string>("Organismo");

                    b.HasKey("Id");

                    b.ToTable("Cliente");

                    b.HasData(
                        new { Id = 1, Codigo = "C001", Nombre = "CTEAG", Organismo = "UNE" }
                    );
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.DetalleDeEntrada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Cantidad");

                    b.Property<int>("EntradaId");

                    b.Property<decimal>("PrecioMlc")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PrecioMn")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductoId");

                    b.HasKey("Id");

                    b.HasIndex("EntradaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetallesDeEntradas");
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.DetalleDeProcesamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Cantidad");

                    b.Property<int>("DerivadoId");

                    b.Property<int>("ProcesamientoId");

                    b.HasKey("Id");

                    b.HasIndex("DerivadoId");

                    b.HasIndex("ProcesamientoId");

                    b.ToTable("DetallesDeProcesamiento");
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.DetalleDeTransferencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Cantidad");

                    b.Property<decimal>("PrecioMlc")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PrecioMn")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductoId");

                    b.Property<int>("TransferenciaId");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("TransferenciaId");

                    b.ToTable("DetallesDeTransferencia");
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.DetalleDeVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Cantidad");

                    b.Property<decimal>("PrecioVentaMlc")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PrecioVentaMn")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductoId");

                    b.Property<int>("VentaId");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentaId");

                    b.ToTable("DetallesDeVenta");
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.Entrada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClienteId");

                    b.Property<bool>("Confirmada");

                    b.Property<DateTime>("Fecha");

                    b.Property<int>("UnidadOrganizativaId");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("UnidadOrganizativaId");

                    b.ToTable("Entrada");
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.Procesamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Cantidad");

                    b.Property<bool>("Confirmado");

                    b.Property<DateTime>("Fecha");

                    b.Property<decimal>("Merma");

                    b.Property<int>("ProductoId");

                    b.Property<int>("UnidadOrganizativaId");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UnidadOrganizativaId");

                    b.ToTable("Procesamientos");
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoriaId");

                    b.Property<string>("Codigo")
                        .IsRequired();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.Property<decimal>("PrecioCompraMlc")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PrecioCompraMn")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PrecioVentaMlc")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PrecioVentaMn")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TipoId");

                    b.Property<int>("UnidadId");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("TipoId");

                    b.HasIndex("UnidadId");

                    b.ToTable("Producto");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Producto");

                    b.HasData(
                        new { Id = 1, CategoriaId = 1, Codigo = "1abcc345", Descripcion = "Hierro Fundido", Nombre = "Hierro", PrecioCompraMlc = 4m, PrecioCompraMn = 100m, PrecioVentaMlc = 6m, PrecioVentaMn = 150m, TipoId = 1, UnidadId = 1 },
                        new { Id = 2, CategoriaId = 3, Codigo = "2def678", Descripcion = "Botella de Ron", Nombre = "Botella de Ron", PrecioCompraMlc = 0.05m, PrecioCompraMn = 1m, PrecioVentaMlc = 0.10m, PrecioVentaMn = 2m, TipoId = 2, UnidadId = 3 },
                        new { Id = 3, CategoriaId = 2, Codigo = "aldef678", Descripcion = "Aluminio", Nombre = "Aluminio", PrecioCompraMlc = 20m, PrecioCompraMn = 500m, PrecioVentaMlc = 32m, PrecioVentaMn = 800m, TipoId = 1, UnidadId = 1 }
                    );
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.Submayor", b =>
                {
                    b.Property<int>("AlmacenId");

                    b.Property<int>("ProductoId");

                    b.Property<decimal>("Cantidad");

                    b.Property<int>("UnidadId");

                    b.HasKey("AlmacenId", "ProductoId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UnidadId");

                    b.ToTable("Submayor");

                    b.HasData(
                        new { AlmacenId = 1, ProductoId = 1, Cantidad = 100m, UnidadId = 1 },
                        new { AlmacenId = 2, ProductoId = 1, Cantidad = 100m, UnidadId = 1 },
                        new { AlmacenId = 3, ProductoId = 1, Cantidad = 20m, UnidadId = 1 },
                        new { AlmacenId = 4, ProductoId = 1, Cantidad = 30m, UnidadId = 1 },
                        new { AlmacenId = 1, ProductoId = 2, Cantidad = 1000m, UnidadId = 3 },
                        new { AlmacenId = 2, ProductoId = 2, Cantidad = 750m, UnidadId = 3 },
                        new { AlmacenId = 3, ProductoId = 2, Cantidad = 400m, UnidadId = 3 },
                        new { AlmacenId = 4, ProductoId = 2, Cantidad = 350m, UnidadId = 3 }
                    );
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.TipoDeProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TipoDeProducto");

                    b.HasData(
                        new { Id = 1, Descripcion = "Metales", Nombre = "Metálico" },
                        new { Id = 2, Descripcion = "Otros Materiales no metálicos", Nombre = "No Metálico" }
                    );
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.Transferencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Confirmada");

                    b.Property<int>("DestinoId");

                    b.Property<DateTime>("Fecha");

                    b.Property<int>("OrigenId");

                    b.HasKey("Id");

                    b.HasIndex("DestinoId");

                    b.HasIndex("OrigenId");

                    b.ToTable("Transferencias");
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.UnidadDeMedida", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Unidad")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("UM");

                    b.HasData(
                        new { Id = 1, Descripcion = "Tonelada", Unidad = "Ton" },
                        new { Id = 2, Descripcion = "KiloGramo", Unidad = "Kg" },
                        new { Id = 3, Descripcion = "Unidad", Unidad = "U" }
                    );
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.UnidadOrganizativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.Property<string>("Telefono");

                    b.HasKey("Id");

                    b.ToTable("UnidadesOrganizativas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UnidadOrganizativa");
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClienteId");

                    b.Property<bool>("Confirmada");

                    b.Property<DateTime>("Fecha");

                    b.Property<int>("UnidadOrganizativaId");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("UnidadOrganizativaId");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "1", ConcurrencyStamp = "c61e862a-a823-4868-920b-3dc43a5e0d4e", Name = "Administrador", NormalizedName = "ADMINISTRADOR" },
                        new { Id = "2", ConcurrencyStamp = "b262579f-8f41-4995-9350-c06fdaba89b2", Name = "Comercial", NormalizedName = "COMERCIAL" },
                        new { Id = "3", ConcurrencyStamp = "b55bc5f3-e06c-4b3f-b97e-004e5c4147b2", Name = "Consultor", NormalizedName = "CONSULTOR" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "f42559a2-2776-4e9b-9ba1-268597eff72b", RoleId = "1" },
                        new { UserId = "e4acfaab-e3c9-42ef-9e21-1902da5374af", RoleId = "2" },
                        new { UserId = "4396dcc4-83c3-4e66-9416-c7df16be8b4a", RoleId = "3" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.Derivado", b =>
                {
                    b.HasBaseType("MateriasPrimasApp.Models.Producto");

                    b.Property<int>("ProductoOrigenId");

                    b.HasIndex("ProductoOrigenId");

                    b.ToTable("Derivado");

                    b.HasDiscriminator().HasValue("Derivado");

                    b.HasData(
                        new { Id = 4, CategoriaId = 2, Codigo = "f678", Descripcion = "Aluminio Laminado", Nombre = "Aluminio Laminado", PrecioCompraMlc = 20m, PrecioCompraMn = 500m, PrecioVentaMlc = 48m, PrecioVentaMn = 1200m, TipoId = 1, UnidadId = 1, ProductoOrigenId = 3 }
                    );
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.CasaCompra", b =>
                {
                    b.HasBaseType("MateriasPrimasApp.Models.UnidadOrganizativa");

                    b.Property<int>("UebId");

                    b.HasIndex("UebId");

                    b.ToTable("CasaCompra");

                    b.HasDiscriminator().HasValue("CasaCompra");

                    b.HasData(
                        new { Id = 3, Nombre = "Casa de compras Versalles", UebId = 1 },
                        new { Id = 4, Nombre = "Casa de compras Playa", UebId = 1 }
                    );
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.UEB", b =>
                {
                    b.HasBaseType("MateriasPrimasApp.Models.UnidadOrganizativa");

                    b.Property<string>("Municipio");

                    b.ToTable("UEB");

                    b.HasDiscriminator().HasValue("UEB");

                    b.HasData(
                        new { Id = 1, Nombre = "UEBMtz", Telefono = "262100", Municipio = "Matanzas" },
                        new { Id = 2, Nombre = "UEBCol", Telefono = "371304", Municipio = "Colón" }
                    );
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.ApplicationUser", b =>
                {
                    b.HasOne("MateriasPrimasApp.Models.UnidadOrganizativa", "UnidadOrganizativa")
                        .WithMany()
                        .HasForeignKey("UnidadOrganizativaId");
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.DetalleDeEntrada", b =>
                {
                    b.HasOne("MateriasPrimasApp.Models.Entrada", "Entrada")
                        .WithMany("DetallesDeEntrada")
                        .HasForeignKey("EntradaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MateriasPrimasApp.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.DetalleDeProcesamiento", b =>
                {
                    b.HasOne("MateriasPrimasApp.Models.Derivado", "Derivado")
                        .WithMany()
                        .HasForeignKey("DerivadoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MateriasPrimasApp.Models.Procesamiento", "Procesamiento")
                        .WithMany("DetallesDeProcesamiento")
                        .HasForeignKey("ProcesamientoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.DetalleDeTransferencia", b =>
                {
                    b.HasOne("MateriasPrimasApp.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MateriasPrimasApp.Models.Transferencia", "Transferencia")
                        .WithMany("DetallesDeTransferencia")
                        .HasForeignKey("TransferenciaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.DetalleDeVenta", b =>
                {
                    b.HasOne("MateriasPrimasApp.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MateriasPrimasApp.Models.Venta", "Venta")
                        .WithMany("DetallesDeVenta")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.Entrada", b =>
                {
                    b.HasOne("MateriasPrimasApp.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MateriasPrimasApp.Models.UnidadOrganizativa", "UnidadOrganizativa")
                        .WithMany()
                        .HasForeignKey("UnidadOrganizativaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.Procesamiento", b =>
                {
                    b.HasOne("MateriasPrimasApp.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MateriasPrimasApp.Models.UnidadOrganizativa", "UnidadOrganizativa")
                        .WithMany()
                        .HasForeignKey("UnidadOrganizativaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.Producto", b =>
                {
                    b.HasOne("MateriasPrimasApp.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MateriasPrimasApp.Models.TipoDeProducto", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MateriasPrimasApp.Models.UnidadDeMedida", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.Submayor", b =>
                {
                    b.HasOne("MateriasPrimasApp.Models.UnidadOrganizativa", "Almacen")
                        .WithMany()
                        .HasForeignKey("AlmacenId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MateriasPrimasApp.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MateriasPrimasApp.Models.UnidadDeMedida", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.Transferencia", b =>
                {
                    b.HasOne("MateriasPrimasApp.Models.UnidadOrganizativa", "Destino")
                        .WithMany()
                        .HasForeignKey("DestinoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MateriasPrimasApp.Models.UnidadOrganizativa", "Origen")
                        .WithMany()
                        .HasForeignKey("OrigenId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.Venta", b =>
                {
                    b.HasOne("MateriasPrimasApp.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MateriasPrimasApp.Models.UnidadOrganizativa", "UnidadOrganizativa")
                        .WithMany()
                        .HasForeignKey("UnidadOrganizativaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MateriasPrimasApp.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MateriasPrimasApp.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MateriasPrimasApp.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MateriasPrimasApp.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.Derivado", b =>
                {
                    b.HasOne("MateriasPrimasApp.Models.Producto", "ProductoOrigen")
                        .WithMany("Derivados")
                        .HasForeignKey("ProductoOrigenId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MateriasPrimasApp.Models.CasaCompra", b =>
                {
                    b.HasOne("MateriasPrimasApp.Models.UEB", "Ueb")
                        .WithMany()
                        .HasForeignKey("UebId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
